# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# user types

class userOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the user create method"""
    id: _int
    artists: List[_str]
    genres: List[_str]


class userCreateInput(userOptionalCreateInput):
    """Required arguments to the user create method"""
    email: _str
    name: _str
    age: _int
    gender: _str
    city: _str
    state: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class userOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the user create method, without relations"""
    id: _int
    artists: List[_str]
    genres: List[_str]


class userCreateWithoutRelationsInput(userOptionalCreateWithoutRelationsInput):
    """Required arguments to the user create method, without relations"""
    email: _str
    name: _str
    age: _int
    gender: _str
    city: _str
    state: _str

class userConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'userCreateWithoutRelationsInput'
    where: 'userWhereUniqueInput'

class userCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    connect_or_create: 'userConnectOrCreateWithoutRelationsInput'


class userCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['userCreateWithoutRelationsInput', List['userCreateWithoutRelationsInput']]
    connect: Union['userWhereUniqueInput', List['userWhereUniqueInput']]
    connect_or_create: Union['userConnectOrCreateWithoutRelationsInput', List['userConnectOrCreateWithoutRelationsInput']]

_userWhereUnique_id_Input = TypedDict(
    '_userWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_userWhereUnique_email_Input = TypedDict(
    '_userWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

userWhereUniqueInput = Union[
    '_userWhereUnique_id_Input',
    '_userWhereUnique_email_Input',
]


class userUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    name: _str
    age: Union[AtomicIntInput, _int]
    gender: _str
    artists: 'types.StringListUpdate'
    genres: 'types.StringListUpdate'
    city: _str
    state: _str


class userUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    name: _str
    age: Union[AtomicIntInput, _int]
    gender: _str
    artists: 'types.StringListUpdate'
    genres: 'types.StringListUpdate'
    city: _str
    state: _str


class userUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['userCreateWithoutRelationsInput']
    connect: List['userWhereUniqueInput']
    connect_or_create: List['userConnectOrCreateWithoutRelationsInput']
    set: List['userWhereUniqueInput']
    disconnect: List['userWhereUniqueInput']
    delete: List['userWhereUniqueInput']

    # TODO
    # update: List['userUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['userUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['userScalarWhereInput']
    # upsert: List['userUpserteWithWhereUniqueWithoutRelationsInput']


class userUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'userCreateWithoutRelationsInput'
    connect: 'userWhereUniqueInput'
    connect_or_create: 'userConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'userUpdateInput'
    # upsert: 'userUpsertWithoutRelationsInput'


class userUpsertInput(TypedDict):
    create: 'userCreateInput'
    update: 'userUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_user_id_OrderByInput = TypedDict(
    '_user_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_user_email_OrderByInput = TypedDict(
    '_user_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_user_name_OrderByInput = TypedDict(
    '_user_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_user_age_OrderByInput = TypedDict(
    '_user_age_OrderByInput',
    {
        'age': 'SortOrder',
    },
    total=True
)

_user_gender_OrderByInput = TypedDict(
    '_user_gender_OrderByInput',
    {
        'gender': 'SortOrder',
    },
    total=True
)

_user_artists_OrderByInput = TypedDict(
    '_user_artists_OrderByInput',
    {
        'artists': 'SortOrder',
    },
    total=True
)

_user_genres_OrderByInput = TypedDict(
    '_user_genres_OrderByInput',
    {
        'genres': 'SortOrder',
    },
    total=True
)

_user_city_OrderByInput = TypedDict(
    '_user_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_user_state_OrderByInput = TypedDict(
    '_user_state_OrderByInput',
    {
        'state': 'SortOrder',
    },
    total=True
)

_user_RelevanceInner = TypedDict(
    '_user_RelevanceInner',
    {
        'fields': 'List[userScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_user_RelevanceOrderByInput = TypedDict(
    '_user_RelevanceOrderByInput',
    {
        '_relevance': '_user_RelevanceInner',
    },
    total=True
)

userOrderByInput = Union[
    '_user_id_OrderByInput',
    '_user_email_OrderByInput',
    '_user_name_OrderByInput',
    '_user_age_OrderByInput',
    '_user_gender_OrderByInput',
    '_user_artists_OrderByInput',
    '_user_genres_OrderByInput',
    '_user_city_OrderByInput',
    '_user_state_OrderByInput',
    '_user_RelevanceOrderByInput',
]



# recursive user types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

userRelationFilter = TypedDict(
    'userRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class userListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class userInclude(TypedDict, total=False):
    """user relational arguments"""


    

class userIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class userIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class userArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyuserArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class reviewsIncludeFromuser(TypedDict, total=False):
    """Relational arguments for user"""


class reviewsIncludeFromuserRecursive1(TypedDict, total=False):
    """Relational arguments for user"""


class reviewsIncludeFromuserRecursive2(TypedDict, total=False):
    """Relational arguments for user"""


class reviewsIncludeFromuserRecursive3(TypedDict, total=False):
    """Relational arguments for user"""


class reviewsIncludeFromuserRecursive4(TypedDict, total=False):
    """Relational arguments for user"""

    

class reviewsArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    include: 'reviewsIncludeFromreviewsRecursive1'


class reviewsArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    include: 'reviewsIncludeFromreviewsRecursive2'


class reviewsArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    include: 'reviewsIncludeFromreviewsRecursive3'


class reviewsArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    include: 'reviewsIncludeFromreviewsRecursive4'


class reviewsArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    
    

class FindManyreviewsArgsFromuser(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive1'


class FindManyreviewsArgsFromuserRecursive1(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive2'


class FindManyreviewsArgsFromuserRecursive2(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive3'


class FindManyreviewsArgsFromuserRecursive3(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive4'


class FindManyreviewsArgsFromuserRecursive4(TypedDict, total=False):
    """Arguments for user"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    


FindManyuserArgs = FindManyuserArgsFromuser
FindFirstuserArgs = FindManyuserArgsFromuser


    

class userWhereInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    gender: Union[_str, 'types.StringFilter']
    artists: 'types.StringListFilter'
    genres: 'types.StringListFilter'
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive1', List['userWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive1']
    OR: List['userWhereInputRecursive1']
    NOT: List['userWhereInputRecursive1']


class userWhereInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    gender: Union[_str, 'types.StringFilter']
    artists: 'types.StringListFilter'
    genres: 'types.StringListFilter'
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive2', List['userWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive2']
    OR: List['userWhereInputRecursive2']
    NOT: List['userWhereInputRecursive2']


class userWhereInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    gender: Union[_str, 'types.StringFilter']
    artists: 'types.StringListFilter'
    genres: 'types.StringListFilter'
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive3', List['userWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive3']
    OR: List['userWhereInputRecursive3']
    NOT: List['userWhereInputRecursive3']


class userWhereInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    gender: Union[_str, 'types.StringFilter']
    artists: 'types.StringListFilter'
    genres: 'types.StringListFilter'
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['userWhereInputRecursive4', List['userWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['userWhereInputRecursive4']
    OR: List['userWhereInputRecursive4']
    NOT: List['userWhereInputRecursive4']


class userWhereInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    age: Union[_int, 'types.IntFilter']
    gender: Union[_str, 'types.StringFilter']
    artists: 'types.StringListFilter'
    genres: 'types.StringListFilter'
    city: Union[_str, 'types.StringFilter']
    state: Union[_str, 'types.StringFilter']



# aggregate user types


    

class userScalarWhereWithAggregatesInput(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    artists: Union[_str, 'types.StringWithAggregatesFilter']
    genres: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive1']
    OR: List['userScalarWhereWithAggregatesInputRecursive1']
    NOT: List['userScalarWhereWithAggregatesInputRecursive1']


class userScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    artists: Union[_str, 'types.StringWithAggregatesFilter']
    genres: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive2']
    OR: List['userScalarWhereWithAggregatesInputRecursive2']
    NOT: List['userScalarWhereWithAggregatesInputRecursive2']


class userScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    artists: Union[_str, 'types.StringWithAggregatesFilter']
    genres: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive3']
    OR: List['userScalarWhereWithAggregatesInputRecursive3']
    NOT: List['userScalarWhereWithAggregatesInputRecursive3']


class userScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    artists: Union[_str, 'types.StringWithAggregatesFilter']
    genres: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['userScalarWhereWithAggregatesInputRecursive4']
    OR: List['userScalarWhereWithAggregatesInputRecursive4']
    NOT: List['userScalarWhereWithAggregatesInputRecursive4']


class userScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """user arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    age: Union[_int, 'types.IntWithAggregatesFilter']
    gender: Union[_str, 'types.StringWithAggregatesFilter']
    artists: Union[_str, 'types.StringWithAggregatesFilter']
    genres: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    state: Union[_str, 'types.StringWithAggregatesFilter']



class userGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    name: _str
    age: _int
    gender: _str
    artists: List[_str]
    genres: List[_str]
    city: _str
    state: _str
    _sum: 'userSumAggregateOutput'
    _avg: 'userAvgAggregateOutput'
    _min: 'userMinAggregateOutput'
    _max: 'userMaxAggregateOutput'
    _count: 'userCountAggregateOutput'


class userAvgAggregateOutput(TypedDict, total=False):
    """user output for aggregating averages"""
    id: float
    age: float


class userSumAggregateOutput(TypedDict, total=False):
    """user output for aggregating sums"""
    id: _int
    age: _int


class userScalarAggregateOutput(TypedDict, total=False):
    """user output including scalar fields"""
    id: _int
    email: _str
    name: _str
    age: _int
    gender: _str
    artists: List[_str]
    genres: List[_str]
    city: _str
    state: _str


userMinAggregateOutput = userScalarAggregateOutput
userMaxAggregateOutput = userScalarAggregateOutput


class userMaxAggregateInput(TypedDict, total=False):
    """user input for aggregating by max"""
    id: bool
    email: bool
    name: bool
    age: bool
    gender: bool
    artists: bool
    genres: bool
    city: bool
    state: bool


class userMinAggregateInput(TypedDict, total=False):
    """user input for aggregating by min"""
    id: bool
    email: bool
    name: bool
    age: bool
    gender: bool
    artists: bool
    genres: bool
    city: bool
    state: bool


class userNumberAggregateInput(TypedDict, total=False):
    """user input for aggregating numbers"""
    id: bool
    age: bool


userAvgAggregateInput = userNumberAggregateInput
userSumAggregateInput = userNumberAggregateInput


userCountAggregateInput = TypedDict(
    'userCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'name': bool,
        'age': bool,
        'gender': bool,
        'artists': bool,
        'genres': bool,
        'city': bool,
        'state': bool,
        '_all': bool,
    },
    total=False,
)

userCountAggregateOutput = TypedDict(
    'userCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'name': int,
        'age': int,
        'gender': int,
        'artists': int,
        'genres': int,
        'city': int,
        'state': int,
        '_all': int,
    },
    total=False,
)


userKeys = Literal[
    'id',
    'email',
    'name',
    'age',
    'gender',
    'artists',
    'genres',
    'city',
    'state',
]
userScalarFieldKeys = Literal[
    'id',
    'email',
    'name',
    'age',
    'gender',
    'artists',
    'genres',
    'city',
    'state',
]
userScalarFieldKeysT = TypeVar('userScalarFieldKeysT', bound=userScalarFieldKeys)

userRelationalFieldKeys = _NoneType

# reviews types

class reviewsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the reviews create method"""
    id: _int


class reviewsCreateInput(reviewsOptionalCreateInput):
    """Required arguments to the reviews create method"""
    artist: _str
    review: _str
    user_id: _int
    rating: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class reviewsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the reviews create method, without relations"""
    id: _int


class reviewsCreateWithoutRelationsInput(reviewsOptionalCreateWithoutRelationsInput):
    """Required arguments to the reviews create method, without relations"""
    artist: _str
    review: _str
    user_id: _int
    rating: _int

class reviewsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'reviewsCreateWithoutRelationsInput'
    where: 'reviewsWhereUniqueInput'

class reviewsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'reviewsCreateWithoutRelationsInput'
    connect: 'reviewsWhereUniqueInput'
    connect_or_create: 'reviewsConnectOrCreateWithoutRelationsInput'


class reviewsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['reviewsCreateWithoutRelationsInput', List['reviewsCreateWithoutRelationsInput']]
    connect: Union['reviewsWhereUniqueInput', List['reviewsWhereUniqueInput']]
    connect_or_create: Union['reviewsConnectOrCreateWithoutRelationsInput', List['reviewsConnectOrCreateWithoutRelationsInput']]

_reviewsWhereUnique_id_Input = TypedDict(
    '_reviewsWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

reviewsWhereUniqueInput = _reviewsWhereUnique_id_Input


class reviewsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    artist: _str
    review: _str
    user_id: Union[AtomicIntInput, _int]
    rating: Union[AtomicIntInput, _int]


class reviewsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    artist: _str
    review: _str
    user_id: Union[AtomicIntInput, _int]
    rating: Union[AtomicIntInput, _int]


class reviewsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['reviewsCreateWithoutRelationsInput']
    connect: List['reviewsWhereUniqueInput']
    connect_or_create: List['reviewsConnectOrCreateWithoutRelationsInput']
    set: List['reviewsWhereUniqueInput']
    disconnect: List['reviewsWhereUniqueInput']
    delete: List['reviewsWhereUniqueInput']

    # TODO
    # update: List['reviewsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['reviewsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['reviewsScalarWhereInput']
    # upsert: List['reviewsUpserteWithWhereUniqueWithoutRelationsInput']


class reviewsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'reviewsCreateWithoutRelationsInput'
    connect: 'reviewsWhereUniqueInput'
    connect_or_create: 'reviewsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'reviewsUpdateInput'
    # upsert: 'reviewsUpsertWithoutRelationsInput'


class reviewsUpsertInput(TypedDict):
    create: 'reviewsCreateInput'
    update: 'reviewsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_reviews_id_OrderByInput = TypedDict(
    '_reviews_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_reviews_artist_OrderByInput = TypedDict(
    '_reviews_artist_OrderByInput',
    {
        'artist': 'SortOrder',
    },
    total=True
)

_reviews_review_OrderByInput = TypedDict(
    '_reviews_review_OrderByInput',
    {
        'review': 'SortOrder',
    },
    total=True
)

_reviews_user_id_OrderByInput = TypedDict(
    '_reviews_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_reviews_rating_OrderByInput = TypedDict(
    '_reviews_rating_OrderByInput',
    {
        'rating': 'SortOrder',
    },
    total=True
)

_reviews_RelevanceInner = TypedDict(
    '_reviews_RelevanceInner',
    {
        'fields': 'List[reviewsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_reviews_RelevanceOrderByInput = TypedDict(
    '_reviews_RelevanceOrderByInput',
    {
        '_relevance': '_reviews_RelevanceInner',
    },
    total=True
)

reviewsOrderByInput = Union[
    '_reviews_id_OrderByInput',
    '_reviews_artist_OrderByInput',
    '_reviews_review_OrderByInput',
    '_reviews_user_id_OrderByInput',
    '_reviews_rating_OrderByInput',
    '_reviews_RelevanceOrderByInput',
]



# recursive reviews types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

reviewsRelationFilter = TypedDict(
    'reviewsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class reviewsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class reviewsInclude(TypedDict, total=False):
    """reviews relational arguments"""


    

class userIncludeFromreviews(TypedDict, total=False):
    """Relational arguments for reviews"""


class userIncludeFromreviewsRecursive1(TypedDict, total=False):
    """Relational arguments for reviews"""


class userIncludeFromreviewsRecursive2(TypedDict, total=False):
    """Relational arguments for reviews"""


class userIncludeFromreviewsRecursive3(TypedDict, total=False):
    """Relational arguments for reviews"""


class userIncludeFromreviewsRecursive4(TypedDict, total=False):
    """Relational arguments for reviews"""

    

class userArgsFromreviews(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'userIncludeFromuserRecursive1'


class userArgsFromreviewsRecursive1(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'userIncludeFromuserRecursive2'


class userArgsFromreviewsRecursive2(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'userIncludeFromuserRecursive3'


class userArgsFromreviewsRecursive3(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'userIncludeFromuserRecursive4'


class userArgsFromreviewsRecursive4(TypedDict, total=False):
    """Arguments for reviews"""
    
    

class FindManyuserArgsFromreviews(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive1'


class FindManyuserArgsFromreviewsRecursive1(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive2'


class FindManyuserArgsFromreviewsRecursive2(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive3'


class FindManyuserArgsFromreviewsRecursive3(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    include: 'userIncludeFromuserRecursive4'


class FindManyuserArgsFromreviewsRecursive4(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['userOrderByInput', List['userOrderByInput']]
    where: 'userWhereInput'
    cursor: 'userWhereUniqueInput'
    distinct: List['userScalarFieldKeys']
    
    

class reviewsIncludeFromreviews(TypedDict, total=False):
    """Relational arguments for reviews"""


class reviewsIncludeFromreviewsRecursive1(TypedDict, total=False):
    """Relational arguments for reviews"""


class reviewsIncludeFromreviewsRecursive2(TypedDict, total=False):
    """Relational arguments for reviews"""


class reviewsIncludeFromreviewsRecursive3(TypedDict, total=False):
    """Relational arguments for reviews"""


class reviewsIncludeFromreviewsRecursive4(TypedDict, total=False):
    """Relational arguments for reviews"""

    

class reviewsArgsFromreviews(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'reviewsIncludeFromreviewsRecursive1'


class reviewsArgsFromreviewsRecursive1(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'reviewsIncludeFromreviewsRecursive2'


class reviewsArgsFromreviewsRecursive2(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'reviewsIncludeFromreviewsRecursive3'


class reviewsArgsFromreviewsRecursive3(TypedDict, total=False):
    """Arguments for reviews"""
    include: 'reviewsIncludeFromreviewsRecursive4'


class reviewsArgsFromreviewsRecursive4(TypedDict, total=False):
    """Arguments for reviews"""
    
    

class FindManyreviewsArgsFromreviews(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive1'


class FindManyreviewsArgsFromreviewsRecursive1(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive2'


class FindManyreviewsArgsFromreviewsRecursive2(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive3'


class FindManyreviewsArgsFromreviewsRecursive3(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    include: 'reviewsIncludeFromreviewsRecursive4'


class FindManyreviewsArgsFromreviewsRecursive4(TypedDict, total=False):
    """Arguments for reviews"""
    take: int
    skip: int
    order_by: Union['reviewsOrderByInput', List['reviewsOrderByInput']]
    where: 'reviewsWhereInput'
    cursor: 'reviewsWhereUniqueInput'
    distinct: List['reviewsScalarFieldKeys']
    


FindManyreviewsArgs = FindManyreviewsArgsFromreviews
FindFirstreviewsArgs = FindManyreviewsArgsFromreviews


    

class reviewsWhereInput(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    artist: Union[_str, 'types.StringFilter']
    review: Union[_str, 'types.StringFilter']
    user_id: Union[_int, 'types.IntFilter']
    rating: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['reviewsWhereInputRecursive1', List['reviewsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['reviewsWhereInputRecursive1']
    OR: List['reviewsWhereInputRecursive1']
    NOT: List['reviewsWhereInputRecursive1']


class reviewsWhereInputRecursive1(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    artist: Union[_str, 'types.StringFilter']
    review: Union[_str, 'types.StringFilter']
    user_id: Union[_int, 'types.IntFilter']
    rating: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['reviewsWhereInputRecursive2', List['reviewsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['reviewsWhereInputRecursive2']
    OR: List['reviewsWhereInputRecursive2']
    NOT: List['reviewsWhereInputRecursive2']


class reviewsWhereInputRecursive2(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    artist: Union[_str, 'types.StringFilter']
    review: Union[_str, 'types.StringFilter']
    user_id: Union[_int, 'types.IntFilter']
    rating: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['reviewsWhereInputRecursive3', List['reviewsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['reviewsWhereInputRecursive3']
    OR: List['reviewsWhereInputRecursive3']
    NOT: List['reviewsWhereInputRecursive3']


class reviewsWhereInputRecursive3(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    artist: Union[_str, 'types.StringFilter']
    review: Union[_str, 'types.StringFilter']
    user_id: Union[_int, 'types.IntFilter']
    rating: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['reviewsWhereInputRecursive4', List['reviewsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['reviewsWhereInputRecursive4']
    OR: List['reviewsWhereInputRecursive4']
    NOT: List['reviewsWhereInputRecursive4']


class reviewsWhereInputRecursive4(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    artist: Union[_str, 'types.StringFilter']
    review: Union[_str, 'types.StringFilter']
    user_id: Union[_int, 'types.IntFilter']
    rating: Union[_int, 'types.IntFilter']



# aggregate reviews types


    

class reviewsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    artist: Union[_str, 'types.StringWithAggregatesFilter']
    review: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reviewsScalarWhereWithAggregatesInputRecursive1']
    OR: List['reviewsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['reviewsScalarWhereWithAggregatesInputRecursive1']


class reviewsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    artist: Union[_str, 'types.StringWithAggregatesFilter']
    review: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reviewsScalarWhereWithAggregatesInputRecursive2']
    OR: List['reviewsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['reviewsScalarWhereWithAggregatesInputRecursive2']


class reviewsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    artist: Union[_str, 'types.StringWithAggregatesFilter']
    review: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reviewsScalarWhereWithAggregatesInputRecursive3']
    OR: List['reviewsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['reviewsScalarWhereWithAggregatesInputRecursive3']


class reviewsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    artist: Union[_str, 'types.StringWithAggregatesFilter']
    review: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['reviewsScalarWhereWithAggregatesInputRecursive4']
    OR: List['reviewsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['reviewsScalarWhereWithAggregatesInputRecursive4']


class reviewsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """reviews arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    artist: Union[_str, 'types.StringWithAggregatesFilter']
    review: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    rating: Union[_int, 'types.IntWithAggregatesFilter']



class reviewsGroupByOutput(TypedDict, total=False):
    id: _int
    artist: _str
    review: _str
    user_id: _int
    rating: _int
    _sum: 'reviewsSumAggregateOutput'
    _avg: 'reviewsAvgAggregateOutput'
    _min: 'reviewsMinAggregateOutput'
    _max: 'reviewsMaxAggregateOutput'
    _count: 'reviewsCountAggregateOutput'


class reviewsAvgAggregateOutput(TypedDict, total=False):
    """reviews output for aggregating averages"""
    id: float
    user_id: float
    rating: float


class reviewsSumAggregateOutput(TypedDict, total=False):
    """reviews output for aggregating sums"""
    id: _int
    user_id: _int
    rating: _int


class reviewsScalarAggregateOutput(TypedDict, total=False):
    """reviews output including scalar fields"""
    id: _int
    artist: _str
    review: _str
    user_id: _int
    rating: _int


reviewsMinAggregateOutput = reviewsScalarAggregateOutput
reviewsMaxAggregateOutput = reviewsScalarAggregateOutput


class reviewsMaxAggregateInput(TypedDict, total=False):
    """reviews input for aggregating by max"""
    id: bool
    artist: bool
    review: bool
    user_id: bool
    rating: bool


class reviewsMinAggregateInput(TypedDict, total=False):
    """reviews input for aggregating by min"""
    id: bool
    artist: bool
    review: bool
    user_id: bool
    rating: bool


class reviewsNumberAggregateInput(TypedDict, total=False):
    """reviews input for aggregating numbers"""
    id: bool
    user_id: bool
    rating: bool


reviewsAvgAggregateInput = reviewsNumberAggregateInput
reviewsSumAggregateInput = reviewsNumberAggregateInput


reviewsCountAggregateInput = TypedDict(
    'reviewsCountAggregateInput',
    {
        'id': bool,
        'artist': bool,
        'review': bool,
        'user_id': bool,
        'rating': bool,
        '_all': bool,
    },
    total=False,
)

reviewsCountAggregateOutput = TypedDict(
    'reviewsCountAggregateOutput',
    {
        'id': int,
        'artist': int,
        'review': int,
        'user_id': int,
        'rating': int,
        '_all': int,
    },
    total=False,
)


reviewsKeys = Literal[
    'id',
    'artist',
    'review',
    'user_id',
    'rating',
]
reviewsScalarFieldKeys = Literal[
    'id',
    'artist',
    'review',
    'user_id',
    'rating',
]
reviewsScalarFieldKeysT = TypeVar('reviewsScalarFieldKeysT', bound=reviewsScalarFieldKeys)

reviewsRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields